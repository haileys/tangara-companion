; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Tangara Companion"
#define MyAppPublisher "Hailey Somerville"
#define MyAppURL "https://github.com/haileys/tangara-companion"
#define MyAppAssocName "Tangara Release Archive"
#define MyAppAssocExt ".tra"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

#define CompanionExe "tangara-companion.exe"
#define CliExe "tangara.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{FDAA85D8-0554-4782-923C-93AF14626F05}
AppName={#MyAppName}
AppVersion={#AppVersion}
;AppVerName={#MyAppName} {#AppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=no
DisableProgramGroupPage=yes
LicenseFile={#ProjectDir}\COPYING
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir={#DistDir}
OutputBaseFilename={#SetupExeName}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: envPath; Description: "Add tangara.exe command line tool to PATH"

[Files]
Source: "{#CargoTargetDir}\{#CompanionExe}"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#CargoTargetDir}\{#CliExe}"; DestDir: "{app}\cli\"; Flags: ignoreversion

; direct dll dependencies:
Source: "{#GtkDir}\bin\adwaita-1-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\cairo-2.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\cairo-gobject-2.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\cairo-script-interpreter-2.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\epoxy-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\ffi-8.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\freetype-6.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\fribidi-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\gdk_pixbuf-2.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\gio-2.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\glib-2.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\gmodule-2.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\gobject-2.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\graphene-1.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\gtk-4-1.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\harfbuzz.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\harfbuzz-subset.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\iconv.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\intl.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\jpeg62.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\libexpat.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\libpng16.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\libxml2.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\pango-1.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\pangocairo-1.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\pangowin32-1.0-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\pcre2-8-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\pixman-1-0.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\rsvg-2-2.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\tiff.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion
Source: "{#GtkDir}\bin\zlib1.dll"; DestDir: "{app}\bin\"; Flags: ignoreversion

; rsvg dynamic loader for gdk-pixbuf
Source: "{#GtkDir}\lib\gdk-pixbuf-2.0\2.10.0\loaders.cache"; DestDir: "{app}\lib\gdk-pixbuf-2.0\2.10.0\"; Flags: ignoreversion
Source: "{#GtkDir}\lib\gdk-pixbuf-2.0\2.10.0\loaders\pixbufloader_svg.dll"; DestDir: "{app}\lib\gdk-pixbuf-2.0\2.10.0\loaders\"; Flags: ignoreversion

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\bin\{#CompanionExe}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\bin\{#CompanionExe}"; Tasks: desktopicon

[Run]
Filename: "{app}\bin\{#CompanionExe}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
procedure EnvAddPath(Path: string);
var
    Paths: string;
begin
    { Retrieve current path (use empty string if entry not exists) }
    if not RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', Paths)
    then Paths := '';

    { Skip if string already found in path }
    if Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';') > 0 then exit;

    { App string to the end of the path variable }
    Paths := Paths + ';' + Path + ';'

    { Overwrite (or create if missing) path environment variable }
    if RegWriteStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', Paths)
    then Log(Format('Added to PATH: %s', [Path]))
    else Log(Format('Error adding to PATH: %s', [Path]));
end;

procedure EnvRemovePath(Path: string);
var
    Paths: string;
    P: Integer;
begin
    { Skip if registry entry not exists }
    if not RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', Paths) then
        exit;

    { Skip if string not found in path }
    P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
    if P = 0 then exit;

    { Update path variable }
    Delete(Paths, P - 1, Length(Path) + 1);

    { Overwrite path environment variable }
    if RegWriteStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', Paths)
    then Log(Format('Removed from PATH: %s', [Path]))
    else Log(Format('Error removing from PATH: %s', [Path]));
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
    if (CurStep = ssPostInstall) and IsTaskSelected('envPath')
    then EnvAddPath(ExpandConstant('{app}') +'\cli');
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if CurUninstallStep = usPostUninstall
    then EnvRemovePath(ExpandConstant('{app}') +'\cli');
end;
